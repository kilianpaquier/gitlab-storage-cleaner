# Code generated by craft; DO NOT EDIT.

name: Docker
run-name: Docker

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  workflow_call:
    inputs:
      release:
        description: Whether the docker built image must be propagated to major and minor tags or not
        required: false
        type: boolean
      version:
        description: The docker tag to build
        required: false
        type: string
  workflow_dispatch:

jobs:

  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false && github.ref_protected != true) }}
    outputs:
      skip: ${{ steps.skip.outputs.skip }}
    steps:
      - id: skip
        run: echo "Running workflow" && echo "skip=false" >> $GITHUB_OUTPUT

  version:
    name: Version
    runs-on: ubuntu-latest
    environment: release
    needs: run-workflow
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      release: ${{ steps.version_merge.outputs.release }}
      version: ${{ steps.version_merge.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - id: version
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: ./.github/actions/version
        with:
          mode: dry_run # compute only the version to build
          token: ${{ secrets.GITHUB_TOKEN }}
      - id: version_merge
        run: |
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            echo "release=${RELEASE}" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "release=${INPUTS_RELEASE}" >> $GITHUB_OUTPUT
          echo "version=${INPUTS_VERSION}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ steps.version.outputs.version }}
          RELEASE: ${{ steps.version.outputs.release }}
          INPUTS_VERSION: ${{ inputs.version }}
          INPUTS_RELEASE: ${{ inputs.release }}

  docker-hadolint:
    name: Docker Hadolint
    runs-on: ubuntu-latest
    needs: run-workflow
    permissions:
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          format: sarif
          output-file: hadolint-results.sarif
      - if: ${{ ! cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif
          category: docker-hadolint
      - id: hadolint
        if: ${{ ! cancelled() }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          format: tty

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    environment: docker
    needs:
      - run-workflow
      - version
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - id: image
        run: |
          IMAGE="ghcr.io/$GITHUB_REPOSITORY"
          if [ "$RELEASE" != "true" ]; then
            IMAGE="$IMAGE/snapshot"
          fi
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
        env:
          RELEASE: ${{ needs.version.outputs.release }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.image }}
          labels: |
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.ref.name="${{ github.ref_name }}"
            org.opencontainers.image.version="${{ needs.version.outputs.version }}"
            org.opencontainers.image.revision="${{ github.sha }}"
          tags: |
            type=raw,enable={{is_default_branch}},value=latest
            type=semver,enable=true,pattern={{raw}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release }},pattern=v{{major}}.{{minor}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release }},pattern=v{{major}},value=${{ needs.version.outputs.version }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  docker-trivy:
    name: Docker Trivy
    runs-on: ubuntu-latest
    environment: docker
    permissions:
      security-events: write
    needs:
      - run-workflow
      - version
      - docker-build
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          format: sarif
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          output: trivy-results.sarif
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          category: docker-trivy
          sarif_file: trivy-results.sarif
      - uses: aquasecurity/trivy-action@master
        with:
          exit-code: "1"
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}