# Code generated by craft; DO NOT EDIT.

name: Release
run-name: Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Dry run
        type: boolean
        default: false

jobs:

  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      version: v${{ steps.semantic_release.outputs.new_release_version }}
      release: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v4
      - id: sha
        run: echo "sha=$(echo "${{ github.ref_name }}" | sha256sum | cut -c -8)" >> $GITHUB_OUTPUT
      - id: semantic_release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
            semantic-release-license
          ci: false
          dry_run: true
          tag_format: v${version}
          branches: |
            [
              "(master|main)",
              "v+([0-9])",
              { "name": "next", "prerelease": true },
              { "name": "beta", "prerelease": true },
              { "name": "alpha", "prerelease": true },
              { "name": "staging", "prerelease": "beta" },
              { "name": "develop", "prerelease": "alpha" },
              { "name": "${{ github.ref_name }}", "prerelease": "${{ steps.sha.outputs.sha }}" }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo v${{ steps.semantic_release.outputs.new_release_version }}
      - id: release
        run: |
          if [[ ${{ steps.semantic_release.outputs.new_release_version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "release=true" >> $GITHUB_OUTPUT
          fi

  go-build:
    runs-on: ubuntu-latest
    needs:
      - version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: goreleaser/goreleaser-action@v5
        with:
          args: release --clean --config .goreleaser.yml --skip=validate --skip=announce --skip=publish --snapshot
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: executables
          # order is important to filter unwanted globs after the filter or desired globs
          path: |
            dist/*
            !dist/*.json
            !dist/*.yaml
            !dist/*/
          retention-days: 1

  docker-build:
    runs-on: ubuntu-latest
    needs:
      - version
    steps:
      - uses: actions/checkout@v4
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          labels: |
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.ref.name="${{ github.ref_name }}"
            org.opencontainers.image.version="${{ needs.version.outputs.version }}"
            org.opencontainers.image.revision="${{ github.sha }}"
          tags: |
            type=raw,enable={{is_default_branch}},value=latest
            type=semver,enable=true,pattern={{raw}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}}.{{minor}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}},value=${{ needs.version.outputs.version }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  docker-trivy:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    needs:
      - version
      - docker-build
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        continue-on-error: true # enforce scan upload to codeql
        with:
          image-ref: "ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}"
          exit-code: "1"
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: false
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: docker-trivy

  release:
    runs-on: ubuntu-latest
    if: github.ref_protected == true
    permissions:
      contents: write
      issues: write
      pull-requests: write
    needs:
      - go-build
      - docker-build
    env:
      GIT_AUTHOR_NAME: ${{ github.triggering_actor }}
      GIT_AUTHOR_EMAIL: ${{ github.triggering_actor }}@users.noreply.github.com
      GIT_COMMITTER_NAME: ${{ github.triggering_actor }}
      GIT_COMMITTER_EMAIL: ${{ github.triggering_actor }}@users.noreply.github.com
    steps:
      - uses: actions/checkout@v4
      - id: sha
        run: echo "sha=$(echo "${{ github.ref_name }}" | sha256sum | cut -c -8)" >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v4
        with:
          name: executables
          path: dist
      - id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
            semantic-release-license
          dry_run: ${{ inputs.dry_run }}
          tag_format: v${version}
          branches: |
            [
              "(master|main)",
              "v+([0-9])",
              { "name": "next", "prerelease": true },
              { "name": "beta", "prerelease": true },
              { "name": "alpha", "prerelease": true },
              { "name": "staging", "prerelease": "beta" },
              { "name": "develop", "prerelease": "alpha" },
              { "name": "${{ github.ref_name }}", "prerelease": "${{ steps.sha.outputs.sha }}" }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}